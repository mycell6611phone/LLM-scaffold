{
"action": "write_file",
"path": "agent_personas.py",
"content": "'''\nagent_personas.py\n\nPurpose\n Scaffold for internal agent personas used by the modular mind loop.\n No business logic. Methods raise NotImplementedError.\n\nRoles\n - BUILDER: code generation and edits\n - EVALUATOR: critique and test design\n - PLANNER: goalâ†’plan decomposition\n - DEBATER: acceptance debate participant\n - SHELL: tool/OS execution wrapper\n - MEMORY_LOGGER: extract and tag memories\n\nIntegration\n - core_loop selects a persona for each phase\n - prompts.py consumes persona system text when building messages\n'''\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Any, Dict, Iterable, List, Optional\n\n__all__ = [\n "PersonaRole",\n "AgentPersona",\n "PersonaRegistry",\n]\n\n\nclass PersonaRole(Enum):\n BUILDER = "BUILDER"\n EVALUATOR = "EVALUATOR"\n PLANNER = "PLANNER"\n DEBATER = "DEBATER"\n SHELL = "SHELL"\n MEMORY_LOGGER = "MEMORY_LOGGER"\n\n\n@dataclass\nclass AgentPersona:\n name: str\n role: PersonaRole\n description: str = ""\n system_preamble: str = ""\n style_hints: List[str] = field(default_factory=list)\n lm_params: Dict[str, Any] = field(default_factory=lambda: {\n "temperature": 0.2,\n "top_p": 0.9,\n "max_tokens": 2048,\n })\n metadata: Dict[str, Any] = field(default_factory=dict)\n\n\nclass PersonaRegistry:\n """\n Registry scaffold for agent personas.\n\n Notes:\n - No persistence. Implementers may back with JSON/SQLite later.\n - All methods raise NotImplementedError in this scaffold.\n """\n\n def init(self, *, namespace: str = "default") -> None:\n self.namespace = namespace\n # Do not create storage here.\n\n def register(self, persona: AgentPersona) -> None:\n """Add or replace a persona in the registry."""\n raise NotImplementedError("PersonaRegistry.register is a scaffold.")\n\n def get(self, name: str) -> AgentPersona:\n """Return persona by name."""\n raise NotImplementedError("PersonaRegistry.get is a scaffold.")\n\n def select(self, role: PersonaRole, *, constraints: Optional[Dict[str, Any]] = None) -> AgentPersona:\n """Select a persona for a role under optional constraints."""\n raise NotImplementedError("PersonaRegistry.select is a scaffold.")\n\n def list_personas(self, *, role: Optional[PersonaRole] = None) -> List[AgentPersona]:\n """List all personas, optionally filtered by role."""\n raise NotImplementedError("PersonaRegistry.list_personas is a scaffold.")\n\n def remove(self, name: str) -> None:\n """Remove persona by name."""\n raise NotImplementedError("PersonaRegistry.remove is a scaffold.")\n\n def render_system(self, persona: AgentPersona, *, context: Optional[Dict[str, Any]] = None) -> str:\n """\n Build a system message string from persona fields and optional context.\n Keep deterministic and short.\n """\n raise NotImplementedError("PersonaRegistry.render_system is a scaffold.")\n"
}
