{
"action": "write_file",
"path": "self_critic.py",
"content": "'''\nself_critic.py\n\nPurpose\n Scaffold for post-execution critique and improvement proposals.\n No business logic. Methods raise NotImplementedError.\n\nOutputs\n - CritiqueReport: scalar scores and improvement suggestions\n - Markdown rendering for human-readable summaries (future)\n\nIntegration\n - core_loop.evaluate() invokes SelfCritic.evaluate()\n - trainer.py may use reports to decide ACCEPT data weighting later\n'''\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import Any, Dict, List, Optional\nfrom datetime import datetime\n\n__all__ = [\n "Improvement",\n "CritiqueReport",\n "SelfCritic",\n]\n\n\n@dataclass\nclass Improvement:\n """Single actionable improvement with an acceptance test."""\n desc: str\n test: str # short acceptance test description\n metric: str # name of metric to check\n target: float # desired threshold or delta\n metadata: Dict[str, Any] = field(default_factory=dict)\n\n\n@dataclass\nclass CritiqueReport:\n """Compact critique artifact for one cycle."""\n correctness: float # 0..1\n efficiency: float # 0..1\n surprise: float # 0..1\n summary: str = ""\n improvements: List[Improvement] = field(default_factory=list)\n metadata: Dict[str, Any] = field(default_factory=dict)\n created_at: datetime = field(default_factory=datetime.utcnow)\n\n\nclass SelfCritic:\n """\n Scaffold API for generating critiques and improvement proposals.\n\n Notes:\n - Keep deterministic scoring rules when implemented.\n - Attach minimal metadata for audit.\n """\n\n def init(self, *, namespace: str = "default", policy: Optional[Dict[str, Any]] = None) -> None:\n self.namespace = namespace\n self.policy = policy or {}\n # No initialization logic in scaffold.\n\n def evaluate(self, result_bundle: Dict[str, Any]) -> CritiqueReport:\n """\n Analyze last execution results and produce a CritiqueReport.\n\n Args:\n result_bundle: Arbitrary result dict from core_loop.execute().\n\n Returns:\n CritiqueReport: Scores and proposed improvements.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("SelfCritic.evaluate is a scaffold.")\n\n def merge(self, reports: List[CritiqueReport]) -> CritiqueReport:\n """\n Combine multiple reports into a single aggregate report.\n\n Args:\n reports: Sequence of CritiqueReport objects.\n\n Returns:\n CritiqueReport: Aggregated view.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("SelfCritic.merge is a scaffold.")\n\n def render_markdown(self, report: CritiqueReport) -> str:\n """\n Render a human-readable markdown summary of a report.\n\n Args:\n report: CritiqueReport to render.\n\n Returns:\n str: Markdown string.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("SelfCritic.render_markdown is a scaffold.")\n"
}
