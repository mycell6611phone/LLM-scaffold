{
"action": "write_file",
"path": "interface.py",
"content": "'''\ninterface.py\n\nPurpose\n Scaffold for I/O handling across CLI/GUI/API frontends.\n No business logic. Methods raise NotImplementedError.\n\nIntegration\n - core_loop perceives via Interface.fetch_event()\n - results and critiques flow out via Interface.send_output()\n - cost and token usage displayed via Interface.report_usage()\n - secrets (API keys) requested via Interface.get_secret()\n'''\n\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional\nfrom datetime import datetime\n\n__all__ = [\n "EventType",\n "UserEvent",\n "OutputMessage",\n "TokenUsage",\n "Interface",\n "CLIInterface",\n]\n\n\nclass EventType(Enum):\n TEXT = "TEXT" # freeform text instruction\n FILE = "FILE" # file path(s) or blob(s)\n BUTTON = "BUTTON" # GUI button id\n PLAN_CONFIRM = "PLAN_CONFIRM"\n ABORT = "ABORT"\n\n\n@dataclass\nclass UserEvent:\n type: EventType\n payload: Dict[str, Any] = field(default_factory=dict)\n ts: datetime = field(default_factory=datetime.utcnow)\n metadata: Dict[str, Any] = field(default_factory=dict)\n\n\n@dataclass\nclass OutputMessage:\n kind: str # e.g., "RESULT", "ERROR", "CRITIQUE", "NOTICE"\n payload: Dict[str, Any] = field(default_factory=dict)\n ts: datetime = field(default_factory=datetime.utcnow)\n metadata: Dict[str, Any] = field(default_factory=dict)\n\n\n@dataclass\nclass TokenUsage:\n model: str\n input_tokens: int = 0\n output_tokens: int = 0\n cost_usd: float = 0.0\n metadata: Dict[str, Any] = field(default_factory=dict)\n\n\nclass Interface:\n """\n Abstract I/O adapter.\n\n Notes:\n - Keep deterministic formatting in concrete implementations.\n - No filesystem or network in this scaffold.\n """\n\n def fetch_event(self, *, timeout_s: Optional[int] = None) -> UserEvent:\n """Block or poll for the next user/system event.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.fetch_event is a scaffold.")\n\n def send_output(self, message: OutputMessage) -> None:\n """Emit a message to the active frontend.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.send_output is a scaffold.")\n\n def ask_confirm(self, prompt: str, *, default: bool = True) -> bool:\n """Request a yes/no confirmation from the user.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.ask_confirm is a scaffold.")\n\n def choose(self, prompt: str, options: List[str], *, multi: bool = False) -> List[str]:\n """Offer a deterministic choice list; return selection(s).\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.choose is a scaffold.")\n\n def get_secret(self, key_name: str) -> str:\n """Return a secret (e.g., API key) from a managed store or prompt.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.get_secret is a scaffold.")\n\n def report_usage(self, usages: List[TokenUsage]) -> None:\n """Display token/cost usage records.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.report_usage is a scaffold.")\n\n def notify(self, title: str, body: str, *, level: str = "info") -> None:\n """Lightweight notification channel.\n\n Raises:\n NotImplementedError: Always in scaffold.\n """\n raise NotImplementedError("Interface.notify is a scaffold.")\n\n\nclass CLIInterface(Interface):\n """CLI adapter scaffold. All methods raise in this scaffold."""\n\n def fetch_event(self, *, timeout_s: Optional[int] = None) -> UserEvent: # type: ignore[override]\n raise NotImplementedError("CLIInterface.fetch_event is a scaffold.")\n\n def send_output(self, message: OutputMessage) -> None: # type: ignore[override]\n raise NotImplementedError("CLIInterface.send_output is a scaffold.")\n\n def ask_confirm(self, prompt: str, *, default: bool = True) -> bool: # type: ignore[override]\n raise NotImplementedError("CLIInterface.ask_confirm is a scaffold.")\n\n def choose(self, prompt: str, options: List[str], *, multi: bool = False) -> List[str]: # type: ignore[override]\n raise NotImplementedError("CLIInterface.choose is a scaffold.")\n\n def get_secret(self, key_name: str) -> str: # type: ignore[override]\n raise NotImplementedError("CLIInterface.get_secret is a scaffold.")\n\n def report_usage(self, usages: List[TokenUsage]) -> None: # type: ignore[override]\n raise NotImplementedError("CLIInterface.report_usage is a scaffold.")\n\n def notify(self, title: str, body: str, *, level: str = "info") -> None: # type: ignore[override]\n raise NotImplementedError("CLIInterface.notify is a scaffold.")\n"
}
